FIRST Sets:
FIRST(<access_modifier>) = {private, public}
FIRST(<add_op>) = {+, -}
FIRST(<additive_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<additive_expr_tail>) = {+, -, Îµ}
FIRST(<and_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}     
FIRST(<and_expr_tail>) = {AND, Îµ}
FIRST(<arg>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<arg_list>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true, Îµ} 
FIRST(<arg_list_tail>) = {,, Îµ}
FIRST(<arr_item_list>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<arr_item_tail>) = {,, Îµ}
FIRST(<arr_items>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true, Îµ}
FIRST(<array_access>) = {[}
FIRST(<array_dec>) = {DT}
FIRST(<array_struct_dec>) = {ID}
FIRST(<assign_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}  
FIRST(<assign_expr_tail>) = {%=, *=, +=, -=, /=, =, Îµ}
FIRST(<assign_op>) = {%=, *=, +=, -=, /=, =}
FIRST(<body>) = {{}
FIRST(<bool_lit>) = {false, true}
FIRST(<break_stmt>) = {break}
FIRST(<catch_item>) = {catch}
FIRST(<catch_list>) = {catch}
FIRST(<catch_list_tail>) = {catch, Îµ}
FIRST(<char_lit>) = {CHAR_CONST}
FIRST(<constructor_dec>) = {ID}
FIRST(<continue_stmt>) = {continue}
FIRST(<dec>) = {DT, private, public}
FIRST(<dec_list>) = {DT, private, public, Îµ}
FIRST(<do_while_stmt>) = {do}
FIRST(<dt_member_tail>) = {(, =, Îµ}
FIRST(<else_part>) = {else, Îµ}
FIRST(<eq_op>) = {!=, ==}
FIRST(<equality_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<equality_expr_tail>) = {!=, ==, Îµ}
FIRST(<expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<expr_list>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<expr_list_tail>) = {,, Îµ}
FIRST(<expr_stmt>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<extends>) = {extends, Îµ}
FIRST(<field_dec>) = {DT}
FIRST(<float_lit>) = {FLOAT_CONST}
FIRST(<for_cond>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true, Îµ}
FIRST(<for_init>) = {!, (, ++, --, ;, CHAR_CONST, DT, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<for_stmt>) = {for}
FIRST(<for_update>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true, Îµ}
FIRST(<func_call>) = {ID}
FIRST(<func_call_expr>) = {(}
FIRST(<if_stmt>) = {if}
FIRST(<int_lit>) = {INT_CONST}
FIRST(<literal>) = {CHAR_CONST, FLOAT_CONST, INT_CONST, STRING_CONST, false, null, true}
FIRST(<main>) = {main}
FIRST(<method_dec>) = {DT}
FIRST(<mst>) = {do, for, if, while, Îµ}
FIRST(<mult_op>) = {%, *, /}
FIRST(<multiplicative_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<multiplicative_expr_tail>) = {%, *, /, Îµ}
FIRST(<or_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<or_expr_tail>) = {OR, Îµ}
FIRST(<param>) = {DT}
FIRST(<param_list>) = {DT, Îµ}
FIRST(<param_list_tail>) = {,, Îµ}
FIRST(<postfix_expr>) = {(, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<postfix_expr_tail>) = {++, --, Îµ}
FIRST(<postfix_op>) = {++, --}
FIRST(<prefix_op>) = {!, ++, --}
FIRST(<primary>) = {(, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<program>) = {DT, private, public, Îµ}
FIRST(<rel_op>) = {}
FIRST(<relational_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<relational_expr_tail>) = {Îµ}
FIRST(<return_stmt>) = {return}
FIRST(<return_value>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true, Îµ}
FIRST(<sst>) = {do, for, if, while, ε}
FIRST(<stmt_body>) = {;, do, for, if, while, {, ε}
FIRST(<string_lit>) = {STRING_CONST}
FIRST(<struct_body>) = {DT, constructor, Îµ}
FIRST(<struct_dec>) = {private, public}
FIRST(<struct_member>) = {DT, constructor}
FIRST(<struct_member_list>) = {DT, constructor, Îµ}
FIRST(<this_stmt>) = {this}
FIRST(<this_target>) = {ID}
FIRST(<throw_stmt>) = {throw}
FIRST(<throw_value>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, new, null, true}
FIRST(<try_stmt>) = {try}
FIRST(<unary_expr>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FIRST(<var_access>) = {ID}
FIRST(<var_access_tail>) = {(, [, Îµ}
FIRST(<var_dec>) = {DT}
FIRST(<var_dec_list>) = {ID}
FIRST(<var_dec_tail>) = {,, Îµ}
FIRST(<var_init>) = {=, Îµ}
FIRST(<while_stmt>) = {while}

FOLLOW Sets:
FOLLOW(<access_modifier>) = {struct}
FOLLOW(<add_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<additive_expr>) = {}
FOLLOW(<additive_expr_tail>) = {}
FOLLOW(<and_expr>) = {OR}
FOLLOW(<and_expr_tail>) = {OR}
FOLLOW(<arg>) = {,}
FOLLOW(<arg_list>) = {)}
FOLLOW(<arg_list_tail>) = {)}
FOLLOW(<arr_item_list>) = {}}
FOLLOW(<arr_item_tail>) = {}}
FOLLOW(<arr_items>) = {}}
FOLLOW(<array_access>) = {++, --}
FOLLOW(<array_dec>) = {}
FOLLOW(<array_struct_dec>) = {}
FOLLOW(<assign_expr>) = {), ,, ;, ]}
FOLLOW(<assign_expr_tail>) = {), ,, ;, ]}
FOLLOW(<assign_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<body>) = {DT, constructor}
FOLLOW(<bool_lit>) = {++, --}
FOLLOW(<break_stmt>) = {}
FOLLOW(<catch_item>) = {catch}
FOLLOW(<catch_list>) = {}
FOLLOW(<catch_list_tail>) = {}
FOLLOW(<char_lit>) = {++, --}
FOLLOW(<constructor_dec>) = {}
FOLLOW(<continue_stmt>) = {}
FOLLOW(<dec>) = {DT, private, public}
FOLLOW(<dec_list>) = {$, main}
FOLLOW(<do_while_stmt>) = {do, else, for, if, while}
FOLLOW(<dt_member_tail>) = {DT, constructor}
FOLLOW(<else_part>) = {do, else, for, if, while}
FOLLOW(<eq_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<equality_expr>) = {AND}
FOLLOW(<equality_expr_tail>) = {AND}
FOLLOW(<expr>) = {), ,, ;, ]}
FOLLOW(<expr_list>) = {)}
FOLLOW(<expr_list_tail>) = {)}
FOLLOW(<expr_stmt>) = {}
FOLLOW(<extends>) = {{}
FOLLOW(<field_dec>) = {}
FOLLOW(<float_lit>) = {++, --}
FOLLOW(<for_cond>) = {;}
FOLLOW(<for_init>) = {;}
FOLLOW(<for_stmt>) = {do, else, for, if, while}
FOLLOW(<for_update>) = {)}
FOLLOW(<func_call>) = {;}
FOLLOW(<func_call_expr>) = {++, --}
FOLLOW(<if_stmt>) = {do, else, for, if, while}
FOLLOW(<int_lit>) = {++, --}
FOLLOW(<literal>) = {++, --}
FOLLOW(<main>) = {DT, private, public}
FOLLOW(<method_dec>) = {}
FOLLOW(<mst>) = {}}
FOLLOW(<mult_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<multiplicative_expr>) = {+, -}
FOLLOW(<multiplicative_expr_tail>) = {+, -}
FOLLOW(<or_expr>) = {%=, *=, +=, -=, /=, =}
FOLLOW(<or_expr_tail>) = {%=, *=, +=, -=, /=, =}
FOLLOW(<param>) = {,}
FOLLOW(<param_list>) = {)}
FOLLOW(<param_list_tail>) = {)}
FOLLOW(<postfix_expr>) = {%, *, /}
FOLLOW(<postfix_expr_tail>) = {%, *, /}
FOLLOW(<postfix_op>) = {%, *, /}
FOLLOW(<prefix_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<primary>) = {++, --}
FOLLOW(<program>) = {$}
FOLLOW(<rel_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<relational_expr>) = {!=, ==}
FOLLOW(<relational_expr_tail>) = {!=, ==}
FOLLOW(<return_stmt>) = {}
FOLLOW(<return_value>) = {;}
FOLLOW(<sst>) = {do, else, for, if, while}
FOLLOW(<stmt_body>) = {do, else, for, if, while}
FOLLOW(<string_lit>) = {++, --}
FOLLOW(<struct_body>) = {}}
FOLLOW(<struct_dec>) = {DT, private, public}
FOLLOW(<struct_member>) = {DT, constructor}
FOLLOW(<struct_member_list>) = {}}
FOLLOW(<this_stmt>) = {}
FOLLOW(<this_target>) = {;}
FOLLOW(<throw_stmt>) = {}
FOLLOW(<throw_value>) = {;}
FOLLOW(<try_stmt>) = {}
FOLLOW(<unary_expr>) = {%, *, /}
FOLLOW(<var_access>) = {++, --}
FOLLOW(<var_access_tail>) = {++, --}
FOLLOW(<var_dec>) = {;, DT, private, public}
FOLLOW(<var_dec_list>) = {;}
FOLLOW(<var_dec_tail>) = {;}
FOLLOW(<var_init>) = {,}
FOLLOW(<while_stmt>) = {do, else, for, if, while}