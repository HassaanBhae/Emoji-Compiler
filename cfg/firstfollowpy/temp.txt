FOLLOW(<access_modifier>) = {struct}
FOLLOW(<add_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<additive_expr>) = {}
FOLLOW(<additive_expr_tail>) = {}
FOLLOW(<and_expr>) = {OR}
FOLLOW(<and_expr_tail>) = {OR}
FOLLOW(<arg>) = {,}
FOLLOW(<arg_list>) = {)}
FOLLOW(<arg_list_tail>) = {)}
FOLLOW(<arr_item_list>) = {}}
FOLLOW(<arr_item_tail>) = {}}
FOLLOW(<arr_items>) = {}}
FOLLOW(<array_access>) = {++, --}
FOLLOW(<array_dec>) = {}
FOLLOW(<array_struct_dec>) = {}
FOLLOW(<assign_expr>) = {), ,, ;, ]}
FOLLOW(<assign_expr_tail>) = {), ,, ;, ]}
FOLLOW(<assign_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<body>) = {DT, constructor}
FOLLOW(<bool_lit>) = {++, --}
FOLLOW(<break_stmt>) = {}
FOLLOW(<catch_item>) = {catch}
FOLLOW(<catch_list>) = {}
FOLLOW(<catch_list_tail>) = {}
FOLLOW(<char_lit>) = {++, --}
FOLLOW(<constructor_dec>) = {}
FOLLOW(<continue_stmt>) = {}
FOLLOW(<dec>) = {DT, private, public}
FOLLOW(<dec_list>) = {$, main}
FOLLOW(<do_while_stmt>) = {do, else, for, if, while}
FOLLOW(<dt_member_tail>) = {DT, constructor}
FOLLOW(<else_part>) = {do, else, for, if, while}
FOLLOW(<eq_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<equality_expr>) = {AND}
FOLLOW(<equality_expr_tail>) = {AND}
FOLLOW(<expr>) = {), ,, ;, ]}
FOLLOW(<expr_list>) = {)}
FOLLOW(<expr_list_tail>) = {)}
FOLLOW(<expr_stmt>) = {}
FOLLOW(<extends>) = {{}
FOLLOW(<field_dec>) = {}
FOLLOW(<float_lit>) = {++, --}
FOLLOW(<for_cond>) = {;}
FOLLOW(<for_init>) = {;}
FOLLOW(<for_stmt>) = {do, else, for, if, while}
FOLLOW(<for_update>) = {)}
FOLLOW(<func_call>) = {;}
FOLLOW(<func_call_expr>) = {++, --}
FOLLOW(<if_stmt>) = {do, else, for, if, while}
FOLLOW(<int_lit>) = {++, --}
FOLLOW(<literal>) = {++, --}
FOLLOW(<main>) = {DT, private, public}
FOLLOW(<method_dec>) = {}
FOLLOW(<mst>) = {}}
FOLLOW(<mult_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<multiplicative_expr>) = {+, -}
FOLLOW(<multiplicative_expr_tail>) = {+, -}
FOLLOW(<or_expr>) = {%=, *=, +=, -=, /=, =}
FOLLOW(<or_expr_tail>) = {%=, *=, +=, -=, /=, =}
FOLLOW(<param>) = {,}
FOLLOW(<param_list>) = {)}
FOLLOW(<param_list_tail>) = {)}
FOLLOW(<postfix_expr>) = {%, *, /}
FOLLOW(<postfix_expr_tail>) = {%, *, /}
FOLLOW(<postfix_op>) = {%, *, /}
FOLLOW(<prefix_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<primary>) = {++, --}
FOLLOW(<program>) = {$}
FOLLOW(<rel_op>) = {!, (, ++, --, CHAR_CONST, FLOAT_CONST, ID, INT_CONST, STRING_CONST, false, null, true}
FOLLOW(<relational_expr>) = {!=, ==}
FOLLOW(<relational_expr_tail>) = {!=, ==}
FOLLOW(<return_stmt>) = {}
FOLLOW(<return_value>) = {;}
FOLLOW(<sst>) = {do, else, for, if, while}
FOLLOW(<stmt_body>) = {do, else, for, if, while}
FOLLOW(<string_lit>) = {++, --}
FOLLOW(<struct_body>) = {}}
FOLLOW(<struct_dec>) = {DT, private, public}
FOLLOW(<struct_member>) = {DT, constructor}
FOLLOW(<struct_member_list>) = {}}
FOLLOW(<this_stmt>) = {}
FOLLOW(<this_target>) = {;}
FOLLOW(<throw_stmt>) = {}
FOLLOW(<throw_value>) = {;}
FOLLOW(<try_stmt>) = {}
FOLLOW(<unary_expr>) = {%, *, /}
FOLLOW(<var_access>) = {++, --}
FOLLOW(<var_access_tail>) = {++, --}
FOLLOW(<var_dec>) = {;, DT, private, public}
FOLLOW(<var_dec_list>) = {;}
FOLLOW(<var_dec_tail>) = {;}
FOLLOW(<var_init>) = {,}
FOLLOW(<while_stmt>) = {do, else, for, if, while}